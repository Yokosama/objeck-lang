class Test {
	function : Main(args : String[]) ~ Nil {
		f := Func2Holder->New(F(IntHolder) ~ IntHolder)<IntHolder, IntHolder>;
		g := Func2Holder->New(G(IntHolder) ~ IntHolder)<IntHolder, IntHolder>;
		
		composer := Func2Composer->New(f)<IntHolder, IntHolder>;
		
		composer->Compose(g)->Apply(4)->PrintLine();
		composer->Then(g)->Apply(4)->PrintLine();
	}

	function : F(a : IntHolder) ~ IntHolder {
		return a * 2;
	}

	function : G(a : IntHolder) ~ IntHolder {
		return a * a;
	}
}

class Func2Composer<X, X> {
	@param : Func2Holder <X, X>;
	@caller : Func2Holder <X, X>;

	New(param : Func2Holder <X, X>) {
		@param := param;
	}

	New(param : Func2Holder <X, X>, caller : Func2Holder <X, X>) {
		@param := param;
		@caller := caller;
	}

	method : public : Apply(x : X) ~ X {
		if(@caller = Nil) {
			return @param->Apply(x);
		}
		else {
			return @caller->Apply(@param->Apply(x));
		};
	}

	method : public : Compose(caller : Func2Holder <X, X>) ~ Func2Composer<X, X> {
		return Func2Composer->New(@param, caller)<X, X>;
	}

	method : public : Then(caller : Func2Holder <X, X>) ~ Func2Composer<X, X> {
		return Func2Composer->New(caller, @param)<X, X>;
	}		
}