use Collection.Generic;

class Test {
	function : Main(args : String[]) ~ Nil {
		f := DoInt(IntHolder) ~ IntHolder;
#		DoInt(IntHolder->New(3))->Get()->PrintLine();
#		f(IntHolder->New(3))->Get()->PrintLine();
#		HiYa( f(IntHolder->New(3))->Get() );
#		x := f(IntHolder->New(3));
#		x->Get()->PrintLine();

		c := Vector->New()<FuncHolder<IntHolder> >;
		
		h1 := FuncHolder->New(DoInt(IntHolder) ~ IntHolder)<IntHolder>;
		h2 := FuncHolder->New(\(IntHolder) ~ IntHolder : (i) => i * Float->SquareRoot(i + i)  )<IntHolder>;
		h3 := FuncHolder->New(DoString(String) ~ String)<String>;

		c->AddBack(h1);
		c->AddBack(h2);

		YoY(c);
	}

	function : YoY(v : Vector<FuncHolder<IntHolder> >) ~ Nil {
		each(i : v) {

		e1 := v->Get(i)->Get()<IntHolder>;
		e1(IntHolder->New(10))->Get()->PrintLine();
	};

	}

	function : DoInt(i : IntHolder) ~ IntHolder {
		return i * 3;
	}

	function : HiYa(i : Int) ~ Nil {
		i->PrintLine();
	}


	function : DoString(s : String) ~ String {
		s := String->New(s);
		s += " tacking on...";
		return s;
	}
}
