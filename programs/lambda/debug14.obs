enum Oper {
	ADD,
	SUB
}

lambdas Funcs {
	Apply : (Int) ~ Int,
	Oper : (Oper, Int, Int) ~ Int
}

class Test {
	function : Main(args : String[]) ~ Nil {
		f := Square(Int) ~ Int;
		PrintOne(f);

		f1 := \Funcs->Apply : (a) => a * a;
		PrintOne(f1);

		f2 := \Funcs->Oper : (o, a, b) => {
			select(o) {
				label Oper->ADD: {
					return a + b;
				}

				label Oper->SUB: {
					return a - b;
				}

				other: {
					return a * b;
				}
			};
		};
		PrintTwo(f2);
	}

	function : Square(a : Int) ~ Int {
		return a * a / 2;
	}

	function : PrintOne(f : (Int) ~ Int) ~ Nil {
		f(12)->PrintLine();
	}

	function : PrintTwo(f : (Oper, Int, Int) ~ Int) ~ Nil {
		f(Oper->ADD, 12,8)->PrintLine();
	}
}

