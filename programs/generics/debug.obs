class Test {
	function : Main(args : String[]) ~ Nil {
		Go();
	}

#	function : native : Go() ~ Nil {
	function : Go() ~ Nil {
		b : Bar<Mock,String> := Bar->Instance()<Mock,String>;
		m := b->Get();	
		m->DoIt()->PrintLine();
	}
}

class Bar<V : Mock, S : Compare> {
	@v : V;
	@n : Float;

	New() {
	}

	function : Instance() ~ Bar<V,S> {
		return Bar->New()<V, S>;
	}
	
	method : public : Set(v : V) ~ Nil {
		@v := v;
		v->DoIt()->PrintLine();
	}
	
	method : public : Get() ~ V {
		return @v;
	}
}

class Foo implements Mock {
	New() {
	}

	method : public : DoIt() ~ Int {
		return 13;
	}

}

interface Mock {
	method : virtual : public : DoIt() ~ Int;
}
