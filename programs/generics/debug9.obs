use Collection.Generic;

class Bar {
	New() {}
}

class Foo {
	function : Main(args : String[]) ~ Nil {
		f := Vector->New()<FloatHolder>;
		f->AddBack("13.5"->ToFloat());
		f->Get(0)->Get()->PrintLine();

#		s := "foo bar";
#		s := IntHolder->New(13);
#~			
		f := Map->New()<String, IntHolder>;

		f->Insert("foo", 13);
		f->Insert("bar", 7);

		f->Size()->PrintLine();
		f->Find("foo")->Get()->PrintLine();
		f->Find("bar")->Get()->PrintLine();

		g := Map->New()<String, String>;
		g->Insert("foo", "barz");
		g->Find("foo")->PrintLine();

		c := CompareVector->New()<String>;
		c->AddBack("Foo");
		c->AddBack("Bar");
		c->AddBack("Zoon");
		c->AddBack("Apple");
		c->AddBack("Objeck");
		c->AddBack("Back");
		c->Sort();
		c->Size()->PrintLine();

		each(i : c) {
			c->Get(i)->PrintLine();
		};

		s := Stack->New()<CharHolder>;
		s->Push('a');
		s->Push(12);
		s->Push('c');
		s->Pop()->Get()->PrintLine();
		s->Pop()->Get()->PrintLine();
		s->Size()->PrintLine();

		h := Hash->New()<String, String>;
		h->Insert("foo", "bar");
		h->Insert("key", "value");
		h->Find("foo")->PrintLine();
		h->Find("key")->PrintLine();

		k := h->GetKeys()<String>;
		each(i : k) {
			k->Get(i)->PrintLine();
		};

		v := Vector->New()<String>;
		vv := Vector->New(v)<String>;
		v->AddBack("foe");
~#		
	}
}